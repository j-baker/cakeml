open import Pervasives
open import Ast
open import SemanticPrimitives
open import BigStep

val mk_binop : string -> op -> dec
let mk_binop name prim =
  Dlet (Pvar name) (Fun "x" (Fun "y" (App prim [Var (Short "x"); Var (Short "y")])))

val mk_unop : string -> op -> dec
let mk_unop name prim =
  Dlet (Pvar name) (Fun "x" (App prim [Var (Short "x")]))

val prim_types_program : prog
let prim_types_program =
  [Tdec (Dexn "Bind" []);
   Tdec (Dexn "Chr" []);
   Tdec (Dexn "Div" []);
   Tdec (Dexn "Eq" []);
   Tdec (Dexn "Subscript" []);
   Tdec (Dtype [(["'a"], "list", [("nil", []); ("::", [Tvar "'a"; Tapp [Tvar "'a"] (TC_name (Short "list"))]);])]);
   Tdec (Dtype [(["'a"], "option", [("NONE", []);("SOME", [Tvar "'a"]);])]);]

val basis_program : prog
let basis_program =
  [Tdec (Dtabbrev [] "int" (Tapp [] TC_int));
   Tdec (Dtabbrev [] "string" (Tapp [] TC_string));
   Tdec (Dtabbrev [] "bool" (Tapp [] TC_bool));
   Tdec (Dtabbrev [] "unit" (Tapp [] TC_unit));
   Tdec (Dtabbrev ["'a"] "ref" (Tapp [Tvar "'a"] TC_ref));
   Tdec (Dtabbrev [] "exn" (Tapp [] TC_exn));
   Tdec (mk_binop "+" (Opn Plus));
   Tdec (mk_binop "-" (Opn Minus));
   Tdec (mk_binop "*" (Opn Times));
   Tdec (mk_binop "div" (Opn Divide));
   Tdec (mk_binop "mod" (Opn Modulo));
   Tdec (mk_binop "<" (Opb Lt));
   Tdec (mk_binop ">" (Opb Gt));
   Tdec (mk_binop "<=" (Opb Leq));
   Tdec (mk_binop ">=" (Opb Geq));
   Tdec (mk_binop "=" Equality);
   Tdec (mk_binop ":=" Opassign);
   Tdec (Dlet (Pvar "~") (Fun "x" (App (Opn Minus) [Lit (IntLit 0); Var(Short"x")])));
   Tdec (mk_unop "!" Opderef);
   Tdec (mk_unop "ref" Opref);
   Tmod "Word8" Nothing 
     [Dtabbrev [] "word" (Tapp [] TC_word8)];
   Tmod "Word8Array" Nothing 
     [Dtabbrev [] "array" (Tapp [] TC_word8array);
      Dtabbrev [] "elem" (Tapp [] TC_word8);
      mk_binop "array" Aw8alloc;
      mk_binop "sub" Aw8sub;
      mk_unop "length" Aw8length;
      Dlet (Pvar "update") (Fun "x" (Fun "y" (Fun "z" (App Aw8update [Var (Short "x"); Var (Short "y"); Var (Short "z")])))) ];
   Tmod "Vector" Nothing
     [Dtabbrev ["'a"] "vector" (Tapp [Tvar "'a"] TC_vector);
      mk_unop "fromList" VfromList;
      mk_unop "length" Vlength;
      mk_binop "sub" Vsub];
   Tmod "Array" Nothing 
     [Dtabbrev ["'a"] "array" (Tapp [Tvar "'a"] TC_array);
      mk_binop "array" Aalloc;
      mk_binop "sub" Asub;
      mk_unop "length" Alength;
      Dlet (Pvar "update") (Fun "x" (Fun "y" (Fun "z" (App Aupdate [Var (Short "x"); Var (Short "y"); Var (Short "z")])))) ];
   Tmod "Char" Nothing
     [Dtabbrev [] "char" (Tapp [] TC_char);
      mk_unop "ord" Ord;
      mk_unop "chr" Chr;
      mk_binop "<" (Chopb Lt);
      mk_binop "<=" (Chopb Leq);
      mk_binop ">" (Chopb Gt);
      mk_binop ">=" (Chopb Geq)];
   Tmod "String" Nothing
     [Dtabbrev [] "string" (Tapp [] TC_string);
      mk_unop "explode" Explode;
      mk_unop "implode" Implode;
      mk_unop "size" Strlen] ]

type sem_environment = <| sem_envM : envM;
                          sem_envC : envC;
                          sem_envE : envE;
                          sem_store : count_store v * set tid_or_exn * set modN |>

val add_to_sem_env : sem_environment -> prog -> maybe sem_environment
let add_to_sem_env se prog =
  let res = { res | evaluate_whole_prog false (se.sem_envM,se.sem_envC,se.sem_envE) se.sem_store prog res } in
    if res = {} then
      Nothing
    else 
      match Set_extra.choose res with
        | (s,envC,Rval (envM,envE)) ->
           Just <| sem_envM = envM ++ se.sem_envM;
                   sem_envC = merge_alist_mod_env envC se.sem_envC;
                   sem_envE = envE ++ se.sem_envE;
                   sem_store = s |>
        | _ -> Nothing
      end

val prim_sem_env : maybe sem_environment
let prim_sem_env =
  add_to_sem_env <| sem_envM = []; sem_envC = ([],[]); sem_envE = []; sem_store = ((0,[]),{},{}) |> prim_types_program

val basis_sem_env : maybe sem_environment
let basis_sem_env =
  add_to_sem_env (Maybe_extra.fromJust prim_sem_env) basis_program

open import TypeSystem
type semantics_state =
             <| (* Type system state *)
                tdecs : decls; tenvT : tenvT; tenvM : tenvM; tenvC : tenvC; tenv : tenvE;
                (* Semantics state *)
                sem_env : sem_environment |>
